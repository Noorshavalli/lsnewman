{
	"info": {
		"_postman_id": "877e7edc-fb2b-45bb-9689-e50a7b8b8c7f",
		"name": "Lotsmart QA API_v1.24.0",
		"description": "LotSmart qa environment api release test suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LogInQA",
			"item": [
				{
					"name": "LSloginroles",
					"item": [
						{
							"name": "LotSmartLogInO_lojackctc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											" pm.test(\"Check if target is undefined\", function () {",
											"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
											"    });",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(9500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-app-key",
										"value": "{{x-app-key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LotSmartLogInadminrole_lojackctc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has JSON body\", function () {",
											"    pm.response.to.be.withBody && pm.response.to.be.json;",
											"});",
											"",
											"// Retrive token",
											"const jsondata= pm.response.json()",
											"let token = jsondata.response.authToken",
											"",
											"pm.globals.set(\"authrization_token\",token);",
											"token = token.substring(7)",
											"console.log(token)",
											"pm.globals.set(\"bearer_token\",token);",
											"pm.environment.set(\"variable_key\", \"variable_value\");",
											"console.log(token.substring(5));",
											"",
											"// Retrive accountId:",
											"let accountId=jsondata.response.user.account.href",
											"let arry = accountId.split('/');",
											"console.log(arry)",
											"console.log('---')",
											"console.log(arry[2])",
											"console.log(arry[arry.length-1])",
											"pm.globals.set(\"accId\",arry[arry.length-1])",
											"",
											"",
											"pm.test(\"User_id\", function () {",
											"       pm.expect(jsondata.response.user.id).to.eql(19028);",
											"});",
											"",
											"pm.test(\"LotSmart application verifcations\", function() {",
											"    pm.expect(jsondata.response.user.applications[0].title).to.eql(pm.globals.get(\"applications1\"));",
											"    pm.expect(jsondata.response.user.applications[1].title).to.eql(pm.globals.get(\"applications2\"))",
											"})",
											"",
											"pm.test(\"LotSmart user role verifcations\", function() {",
											"    pm.expect(jsondata.response.user.roles[0].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Admin User\"]);",
											"    pm.expect(jsondata.response.user.roles[1].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Admin User\"]);",
											"})",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"eulaUrl\");",
											"});",
											"",
											"//** Response Header verification",
											"pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
											"    }); ",
											" pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"    });    ",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(13000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-app-key",
										"type": "text",
										"value": "{{x-app-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{lojackadminusr}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LotSmartLogInadminassistrole_lojackctc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has JSON body\", function () {",
											"    pm.response.to.be.withBody && pm.response.to.be.json;",
											"});",
											"",
											"// Retrive token",
											"const jsondata= pm.response.json()",
											"let token = jsondata.response.authToken",
											"",
											"pm.globals.set(\"authrization_token\",token);",
											"token = token.substring(7)",
											"console.log(token)",
											"pm.globals.set(\"bearer_token\",token);",
											"pm.environment.set(\"variable_key\", \"variable_value\");",
											"console.log(token.substring(5));",
											"",
											"// Retrive accountId:",
											"let accountId=jsondata.response.user.account.href",
											"let arry = accountId.split('/');",
											"console.log(arry)",
											"console.log('---')",
											"console.log(arry[2])",
											"console.log(arry[arry.length-1])",
											"pm.globals.set(\"accId\",arry[arry.length-1])",
											"",
											"",
											"pm.test(\"User_id\", function () {",
											"       pm.expect(jsondata.response.user.id).to.eql(22529);",
											"});",
											"",
											"pm.test(\"LotSmart application verifcations\", function() {",
											"    pm.expect(jsondata.response.user.applications[0].title).to.eql(pm.globals.get(\"applications1\"));",
											"    pm.expect(jsondata.response.user.applications[1].title).to.eql(pm.globals.get(\"applications2\"))",
											"})",
											"",
											"pm.test(\"LotSmart user role verifcations\", function() {",
											"    pm.expect(jsondata.response.user.roles[0].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Admin Assistant\"]);",
											"    pm.expect(jsondata.response.user.roles[1].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Admin Assistant\"]);",
											"    pm.expect(jsondata.response.user.roles[1].title).to.eql(\"LotSmart Admin Assistant\");",
											"})",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"eulaUrl\");",
											"});",
											"",
											"//** Response Header verification",
											"pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
											"    }); ",
											" pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"    });    ",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(13000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-app-key",
										"type": "text",
										"value": "{{x-app-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{lojackadminasistusr}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LotSmartLogInsalesrole_lojackctc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has JSON body\", function () {",
											"    pm.response.to.be.withBody && pm.response.to.be.json;",
											"});",
											"",
											"// Retrive token",
											"const jsondata= pm.response.json()",
											"let token = jsondata.response.authToken",
											"",
											"pm.globals.set(\"authrization_token\",token);",
											"token = token.substring(7)",
											"console.log(token)",
											"pm.globals.set(\"bearer_token\",token);",
											"pm.environment.set(\"variable_key\", \"variable_value\");",
											"console.log(token.substring(5));",
											"",
											"// Retrive accountId:",
											"let accountId=jsondata.response.user.account.href",
											"let arry = accountId.split('/');",
											"console.log(arry)",
											"console.log('---')",
											"console.log(arry[2])",
											"console.log(arry[arry.length-1])",
											"pm.globals.set(\"accId\",arry[arry.length-1])",
											"",
											"",
											"pm.test(\"User_id\", function () {",
											"       pm.expect(jsondata.response.user.id).to.eql(22391);",
											"});",
											"",
											"pm.test(\"LotSmart application verifcations\", function() {",
											"    pm.expect(jsondata.response.user.applications[0].title).to.eql(pm.globals.get(\"applications1\"));",
											"    pm.expect(jsondata.response.user.applications[1].title).to.eql(pm.globals.get(\"applications2\"))",
											"})",
											"",
											"pm.test(\"LotSmart user role verifcations\", function() {",
											"    pm.expect(jsondata.response.user.roles[0].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Sales\"]);",
											"    pm.expect(jsondata.response.user.roles[1].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Sales\"]);",
											"    pm.expect(jsondata.response.user.roles[0].title).to.eql(\"LotSmart Sales\");",
											"})",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"eulaUrl\");",
											"});",
											"",
											"//** Response Header verification",
											"pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
											"    }); ",
											" pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"    });    ",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(13000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-app-key",
										"type": "text",
										"value": "{{x-app-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{lojacksalesusr}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LotSmartLogInmanagerole_lojackctc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has JSON body\", function () {",
											"    pm.response.to.be.withBody && pm.response.to.be.json;",
											"});",
											"",
											"// Retrive token",
											"const jsondata= pm.response.json()",
											"let token = jsondata.response.authToken",
											"",
											"pm.globals.set(\"authrization_token\",token);",
											"token = token.substring(7)",
											"console.log(token)",
											"pm.globals.set(\"bearer_token\",token);",
											"pm.environment.set(\"variable_key\", \"variable_value\");",
											"console.log(token.substring(5));",
											"",
											"// Retrive accountId:",
											"let accountId=jsondata.response.user.account.href",
											"let arry = accountId.split('/');",
											"console.log(arry)",
											"console.log('---')",
											"console.log(arry[2])",
											"console.log(arry[arry.length-1])",
											"pm.globals.set(\"accId\",arry[arry.length-1])",
											"",
											"",
											"pm.test(\"User_id\", function () {",
											"       pm.expect(jsondata.response.user.id).to.eql(22974);",
											"});",
											"",
											"pm.test(\"LotSmart application verifcations\", function() {",
											"    pm.expect(jsondata.response.user.applications[0].title).to.eql(pm.globals.get(\"applications1\"));",
											"    pm.expect(jsondata.response.user.applications[1].title).to.eql(pm.globals.get(\"applications2\"))",
											"})",
											"",
											"pm.test(\"LotSmart user role verifcations\", function() {",
											"    pm.expect(jsondata.response.user.roles[0].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Manager\"]);",
											"    pm.expect(jsondata.response.user.roles[1].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Manager\"]);",
											"    pm.expect(jsondata.response.user.roles[0].title).to.eql(\"LotSmart Manager\");",
											"})",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"eulaUrl\");",
											"});",
											"",
											"//** Response Header verification",
											"pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
											"    }); ",
											" pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"    });    ",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(13000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-app-key",
										"type": "text",
										"value": "{{x-app-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{lojackmanagerusr}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LotSmartLogInmanageassistrole_lojackctc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has JSON body\", function () {",
											"    pm.response.to.be.withBody && pm.response.to.be.json;",
											"});",
											"",
											"// Retrive token",
											"const jsondata= pm.response.json()",
											"let token = jsondata.response.authToken",
											"",
											"pm.globals.set(\"authrization_token\",token);",
											"token = token.substring(7)",
											"console.log(token)",
											"pm.globals.set(\"bearer_token\",token);",
											"pm.environment.set(\"variable_key\", \"variable_value\");",
											"console.log(token.substring(5));",
											"",
											"// Retrive accountId:",
											"let accountId=jsondata.response.user.account.href",
											"let arry = accountId.split('/');",
											"console.log(arry)",
											"console.log('---')",
											"console.log(arry[2])",
											"console.log(arry[arry.length-1])",
											"pm.globals.set(\"accId\",arry[arry.length-1])",
											"",
											"",
											"pm.test(\"User_id\", function () {",
											"       pm.expect(jsondata.response.user.id).to.eql(23248);",
											"});",
											"",
											"pm.test(\"LotSmart application verifcations\", function() {",
											"    pm.expect(jsondata.response.user.applications[0].title).to.eql(pm.globals.get(\"applications1\"));",
											"    pm.expect(jsondata.response.user.applications[1].title).to.eql(pm.globals.get(\"applications2\"))",
											"})",
											"",
											"pm.test(\"LotSmart user role verifcations\", function() {",
											"    pm.expect(jsondata.response.user.roles[0].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Manager Assistant\"]);",
											"    pm.expect(jsondata.response.user.roles[1].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Manager Assistant\"]);",
											"    pm.expect(jsondata.response.user.roles[0].title).to.eql(\"LotSmart Manager Assistant\");",
											"})",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"eulaUrl\");",
											"});",
											"",
											"//** Response Header verification",
											"pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
											"    }); ",
											" pm.test(\"content type is present in response header\", function(){",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
											"    });    ",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(13000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-app-key",
										"type": "text",
										"value": "{{x-app-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{lojackmanagerassistusr}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "LogIn to LotSamrt application with different roles at Lojack CTC account and Dealer Acc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5da444a7-972d-4262-a187-5b5343ac3d7e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85f5744c-cdc9-42d5-9791-8b9d553ddefa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "LotSmartLogInO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "LotSmartLogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"// Retrive token",
									"const jsondata= pm.response.json()",
									"let token = jsondata.response.authToken",
									"",
									"pm.globals.set(\"authrization_token\",token);",
									"token = token.substring(7)",
									"console.log(token)",
									"pm.globals.set(\"bearer_token\",token);",
									"pm.environment.set(\"variable_key\", \"variable_value\");",
									"console.log(token.substring(5));",
									"",
									"// Retrive accountId:",
									"let accountId=jsondata.response.user.account.href",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"",
									"pm.test(\"User_id\", function () {",
									"       pm.expect(jsondata.response.user.id).to.eql(22532);",
									"});",
									"",
									"pm.test(\"LotSmart application verifcations\", function() {",
									"    pm.expect(jsondata.response.user.applications[0].title).to.eql(pm.globals.get(\"applications1\"));",
									"    pm.expect(jsondata.response.user.applications[1].title).to.eql(pm.globals.get(\"applications2\"))",
									"})",
									"",
									"pm.test(\"LotSmart user role verifcations\", function() {",
									"    pm.expect(jsondata.response.user.roles[0].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Admin User\"]);",
									"    pm.expect(jsondata.response.user.roles[1].title).to.be.oneOf([\"SureDrive Admin User\",\"LotSmart Admin User\"]);",
									"})",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"eulaUrl\");",
									"});",
									"",
									"//** Response Header verification",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
									"    }); ",
									" pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    });    ",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(13000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{lslojackusername}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "LotSmartLogIn_aca",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844e40ba-5eb2-407c-affa-4f026981f2a1",
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"// Retrive data validation of payload",
									"const jsondata= pm.response.json()",
									"pm.test(\"User_id\", function () {",
									"pm.expect(jsondata).to.have.property('response')",
									"&& pm.expect(jsondata.response).to.have.property('errors')",
									"&& pm.expect(jsondata.response).to.have.property('results');",
									"});",
									"",
									"pm.test(\" Responce verification\", function () {",
									"       pm.expect(jsondata.response.errors[0]).to.eql(\"Bad credentials\");",
									"       pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"//** Response Header verification",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");",
									"    }); ",
									" pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    });    ",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(13000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{lslojackusername}}\",\"password\":\"{{password_wrng}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ForgotpasswordO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57e7750b-fc87-4a37-8688-e1316052136b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									" pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    }); ",
									"    ",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/users/forgotpassword?username=znshavalli%40gmail.com&appName=lotsmart&appFunc=password",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"users",
								"forgotpassword"
							],
							"query": [
								{
									"key": "username",
									"value": "znshavalli%40gmail.com"
								},
								{
									"key": "appName",
									"value": "lotsmart"
								},
								{
									"key": "appFunc",
									"value": "password"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgotpassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57e7750b-fc87-4a37-8688-e1316052136b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									" ",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"    ",
									" // Response data validation",
									" const jsondata= pm.response.json()",
									"pm.test(\"User_id\", function () {",
									"    pm.expect(jsondata).to.have.property('response')",
									"    && pm.expect(jsondata.response).to.have.property('totalCount')",
									"    && pm.expect(jsondata.response).to.have.property('results');",
									"});",
									"",
									"pm.test(\" Responce verification\", function () {",
									"   pm.expect(jsondata.response.totalCount).to.eql(0)",
									"   && pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"",
									" ",
									" ",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoVG9rZW4iOiJjaVV5Um1wWWJUTk9PV2xHU21aalUzTjFTM2t5Y1ROQkpUTkVKVE5FT2tGNFpYTTBaWHAxY2pRMWRqSlFlSFE0ZDI5cmVVRWxNMFFsTTBRIiwidXNlcklkIjoxNjAyLCJhY2NvdW50SWQiOjE1NDMsInBhcmVudEFjY291bnRJZCI6NTE4LCJmaXJzdE5hbWUiOiJMb0phY2siLCJsYXN0TmFtZSI6IlN5c3RlbSIsInVzZXJuYW1lIjoibG9qYWNrdXNlciIsImVtYWlsIjoidmdvc3dhbWlAY2FsYW1wLmNvbSIsInJvbGVzIjoiW3tcImhyZWZcIjpcImh0dHBzOi8vY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzE4XCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJEZXZpY2VPdXRsb29rIFN1cGVyIEFkbWluXCIsXCJzdGF0dXNcIjpcIkVuYWJsZWRcIn0se1wiaHJlZlwiOlwiaHR0cHM6Ly9jb25uZWN0LmNhbGFtcC5jb206NDQzL2Nvbm5lY3Qvc2VydmljZXMvcm9sZXMvNDM3XCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJTdXJlRHJpdmUgQWRtaW4gVXNlclwiLFwic3RhdHVzXCI6XCJFbmFibGVkXCJ9LHtcImhyZWZcIjpcImh0dHBzOi8vY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzUwMlwiLFwicmVsXCI6XCJyb2xlXCIsXCJ0aXRsZVwiOlwiTG90U21hcnQgQWRtaW4gVXNlclwiLFwic3RhdHVzXCI6XCJFbmFibGVkXCJ9LHtcImhyZWZcIjpcImh0dHBzOi8vY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzUxN1wiLFwicmVsXCI6XCJyb2xlXCIsXCJ0aXRsZVwiOlwiQ1RDIEFkbWluIC0gQWxsIEZlYXR1cmVzIFJvbGVcIixcInN0YXR1c1wiOlwiRW5hYmxlZFwifSx7XCJocmVmXCI6XCJodHRwczovL2Nvbm5lY3QuY2FsYW1wLmNvbTo0NDMvY29ubmVjdC9zZXJ2aWNlcy9yb2xlcy8xXCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJDYWRtaW5cIixcInN0YXR1c1wiOlwiRW5hYmxlZFwifV0iLCJ4QXBwS2V5IjoiNzFmNGExZDktY2QxMC00YThkLWFjNTAtNjViNGQ5NjJhYmI2IiwiaWF0IjoxNTc2NjkxMjkxfQ.OV0sL30f348HFzs38fYCZqhDhdD0y5NLhCKp-Dq7z20",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/users/forgotpassword?username=znshavalli%40gmail.com&appName=lotsmart&appFunc=password",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"users",
								"forgotpassword"
							],
							"query": [
								{
									"key": "username",
									"value": "znshavalli%40gmail.com"
								},
								{
									"key": "appName",
									"value": "lotsmart"
								},
								{
									"key": "appFunc",
									"value": "password"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgotpassword_invalidemail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57e7750b-fc87-4a37-8688-e1316052136b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									" ",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"    ",
									" // Response data validation",
									" const jsondata= pm.response.json()",
									"pm.test(\"User_id\", function () {",
									"    pm.expect(jsondata).to.have.property('response')",
									"    && pm.expect(jsondata.response).to.have.property('totalCount')",
									"    && pm.expect(jsondata.response).to.have.property('results');",
									"});",
									"",
									"pm.test(\" Responce verification\", function () {",
									"   pm.expect(jsondata.response.totalCount).to.eql(0)",
									"   && pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"",
									" ",
									" ",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoVG9rZW4iOiJjaVV5Um1wWWJUTk9PV2xHU21aalUzTjFTM2t5Y1ROQkpUTkVKVE5FT2tGNFpYTTBaWHAxY2pRMWRqSlFlSFE0ZDI5cmVVRWxNMFFsTTBRIiwidXNlcklkIjoxNjAyLCJhY2NvdW50SWQiOjE1NDMsInBhcmVudEFjY291bnRJZCI6NTE4LCJmaXJzdE5hbWUiOiJMb0phY2siLCJsYXN0TmFtZSI6IlN5c3RlbSIsInVzZXJuYW1lIjoibG9qYWNrdXNlciIsImVtYWlsIjoidmdvc3dhbWlAY2FsYW1wLmNvbSIsInJvbGVzIjoiW3tcImhyZWZcIjpcImh0dHBzOi8vY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzE4XCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJEZXZpY2VPdXRsb29rIFN1cGVyIEFkbWluXCIsXCJzdGF0dXNcIjpcIkVuYWJsZWRcIn0se1wiaHJlZlwiOlwiaHR0cHM6Ly9jb25uZWN0LmNhbGFtcC5jb206NDQzL2Nvbm5lY3Qvc2VydmljZXMvcm9sZXMvNDM3XCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJTdXJlRHJpdmUgQWRtaW4gVXNlclwiLFwic3RhdHVzXCI6XCJFbmFibGVkXCJ9LHtcImhyZWZcIjpcImh0dHBzOi8vY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzUwMlwiLFwicmVsXCI6XCJyb2xlXCIsXCJ0aXRsZVwiOlwiTG90U21hcnQgQWRtaW4gVXNlclwiLFwic3RhdHVzXCI6XCJFbmFibGVkXCJ9LHtcImhyZWZcIjpcImh0dHBzOi8vY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzUxN1wiLFwicmVsXCI6XCJyb2xlXCIsXCJ0aXRsZVwiOlwiQ1RDIEFkbWluIC0gQWxsIEZlYXR1cmVzIFJvbGVcIixcInN0YXR1c1wiOlwiRW5hYmxlZFwifSx7XCJocmVmXCI6XCJodHRwczovL2Nvbm5lY3QuY2FsYW1wLmNvbTo0NDMvY29ubmVjdC9zZXJ2aWNlcy9yb2xlcy8xXCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJDYWRtaW5cIixcInN0YXR1c1wiOlwiRW5hYmxlZFwifV0iLCJ4QXBwS2V5IjoiNzFmNGExZDktY2QxMC00YThkLWFjNTAtNjViNGQ5NjJhYmI2IiwiaWF0IjoxNTc2NjkxMjkxfQ.OV0sL30f348HFzs38fYCZqhDhdD0y5NLhCKp-Dq7z20",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/users/forgotpassword?username=znshavalli&appName=lotsmart&appFunc=password",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"users",
								"forgotpassword"
							],
							"query": [
								{
									"key": "username",
									"value": "znshavalli"
								},
								{
									"key": "appName",
									"value": "lotsmart"
								},
								{
									"key": "appFunc",
									"value": "password"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting token search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11c37db0-2f06-4950-be70-4b5b834250ee",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Did return token\", function() {",
									"   pm.expect(jsonData.results.token.length === 128).to.be.true",
									"});",
									"",
									"pm.test(\"Returned no errors\", function() {",
									"    //var jsonData = pm.response.json();",
									"    pm.expect(jsonData.results.length).to.equal();",
									"});",
									"",
									"pm.test(\"Returned pp token\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results') ",
									"    && pm.expect(jsonData.results.token.length).to.not.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/reporting/token/{{accountId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"reporting",
								"token",
								"{{accountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sub-accOfLogInAcc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f53ad461-c579-4e88-99b1-be45f80baa1b",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 8000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
									"});\r",
									"\r",
									"let jsondata = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response has JSON body\", function () {\r",
									"    pm.response.to.be.withBody && pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"content type is present in response header\", function(){\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.deep.equal(\"application/json; charset=utf-8\");\r",
									"    });\r",
									"    \r",
									"pm.test(\"Number of accounts and length \", function() {\r",
									"    pm.expect(jsondata.response).to.have.property('results') \r",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)\r",
									"    && pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty;\r",
									"    });\r",
									" \r",
									" pm.test(\"Number of accounts properties check \", function() {\r",
									"    pm.expect(jsondata.response.results[0]).to.have.property('account') \r",
									"    && pm.expect(jsondata.response.results[0].account).to.have.property('airtimeNotificationHistory')\r",
									"    && pm.expect(jsondata.response.results[0].account).to.have.property('subAccounts')\r",
									"    && pm.expect(jsondata.response.results[0].account).to.have.property('applications');\r",
									"    });\r",
									"    \r",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";\r",
									" console.log(loginurl)    \r",
									" \r",
									" var xappkey = pm.environment.get(\"x-app-key\");\r",
									" console.log(xappkey)\r",
									" var username = pm.environment.get(\"lslojackusername\");\r",
									" var password = pm.environment.get(\"password\");\r",
									" console.log(username,password)    \r",
									"    \r",
									"if (jsondata.response.hasOwnProperty('errors')){\r",
									"\r",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ \r",
									"\tpm.test(\"Response has JSON body\", function () {\r",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty\r",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;\r",
									"    }); \r",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";\r",
									"    console.log(loginurl)\r",
									"    \r",
									"    var xappkey = pm.environment.get(\"x-app-key\");\r",
									"    console.log(xappkey)\r",
									"\tconst postRequest = {\r",
									"        url: loginurl , method: 'POST',\r",
									"        header: {'Content-Type':'application/json',\r",
									"                'x-app-key':xappkey\r",
									"                },\r",
									"        body: { mode: 'raw',\r",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})\r",
									"                }\r",
									"        };\r",
									"            \r",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {\r",
									"//\t  console.log(err ? err : res.json());\r",
									"//});\r",
									"    console.log(loginurl)\r",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){\r",
									"        //pm.response.to.have.status(401)\r",
									"        pm.sendRequest(postRequest, function (err,res){\r",
									"                if (err) {\r",
									"                            console.log(err);\r",
									"                }\r",
									"                else {\r",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);\r",
									"\t\t\t\t\t\tlet jsondatanew=res.json();\r",
									"                        let token = jsondatanew.response.authToken\r",
									"\t\t\t\t\t\ttoken = token.substring(7)\r",
									"\t\t\t\t\t\tconsole.log(token)\r",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);\r",
									"\t\t\t\t\t\tconsole.log(token.substring(5));\r",
									"\r",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);\r",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))\r",
									"                      }\r",
									"            });\r",
									"        \r",
									"    });\r",
									"    postman.setNextRequest(pm.info.requestName);\r",
									"\t}\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": " {{authtoken_key}}",
								"type": "text"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": " https://qainventory.lojack.com/",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/accounts/{{accountId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "LotSmart user logIn BCA and ACA functionality with different user roles",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "SearchUsersO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    }); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": " {{authtoken_key}}",
								"type": "text"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": " https://qainventory.lojack.com/",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lspartialSearchUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"// Retrive token",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('eula')",
									"    });",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"    ",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\",\n            \"username\": \"*zd*\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lsSearchUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"// Retrive token",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });\t ",
									"",
									"",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[1].user).to.have.property('eula')",
									"    });",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"    ",
									"pm.test(\"Response time is less than15000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lsSearchusersRowsperpage50",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(50)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 50,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\",\n            \"username\": \"*zd*\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingASCusersnameRowsperpage10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[1].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\"\n        },\n        \"sort\": [\n            \"-username\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingASCusersnameRowsperpage10 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[1].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\"\n        },\n        \"sort\": [\n            \"-username\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingDESCusersnameRowsperpage10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[8].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\"\n        },\n        \"sort\": [\n            \"+username\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingDESCusersnameRowsperpage50",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(50)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[8].user).to.have.property('eula')",
									"    });",
									"// To retain request name",
									"console.log(pm.info.requestName);",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 50,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}}\"\n        },\n        \"sort\": [\n            \"+username\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingASCaccountnameRowsperpage10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[1].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}},{{accountId1}}\"\n        },\n        \"sort\": [\n            \"-account\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingASCaccountnameRowsperpage50",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(50)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 50,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}},{{accountId1}}\"\n        },\n        \"sort\": [\n            \"-account\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=50 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "50 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingDESCaccountnameRowsperpage10_multipleacc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[8].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 10,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}},{{accountId1}}\"\n        },\n        \"sort\": [\n            \"+account\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lssortingDESCaccountsnameRowsperpage50_multipleaccs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"    ",
									"// Retrive data validation",
									"const jsondata= pm.response.json()",
									"//let token = jsondata.response.authToken",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(50)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"pm.test(\"user eula support\", function() {",
									"    pm.expect(jsondata.response.results[8].user).to.have.property('eula')",
									"    });",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": {\n        \"maxResults\": 50,\n        \"searchTerms\": {\n            \"account\": \"{{accountId}},{{accountId1}}\"\n        },\n        \"sort\": [\n            \"+account\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/users/search?include=extAttribs&pg=1&pgsize=50 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "include",
									"value": "extAttribs"
								},
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "50 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchUsersrolesO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    }); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"disabled": true
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/accounts/{{accountId}}/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "VSearchUsersroles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\")",
									"    && pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    }); ",
									"    ",
									"    ",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12000);",
									"});    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/accounts/{{accountId}}/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserwithadminroles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202])",
									"    || pm.response.to.have.status(200);",
									"});",
									"",
									"//pm.test(\"Status code is 200\", function () {",
									"//    pm.response.to.have.status(200);",
									"//});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"",
									"// Retrive data validation",
									"const jsondata= pm.response.json();",
									"\t\t\t\t\t",
									"pm.test(\"username and role support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('username') ",
									"    &&  pm.expect(jsondata.response.results[0].user.username).to.eql(pm.environment.get(\"lojackadminuser\"))",
									"    &&  pm.expect(jsondata.response.results[0].user.roles[1].title).to.eql('LotSmart Admin User');",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),",
									"\tpm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"",
									"// Full authentication fail",
									"if (jsondata.response.hasOwnProperty('searchableProperties')){",
									"pm.environment.set(\"lojackadminuserId\",jsondata.response.results[0].user.id);",
									"}",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									"",
									"function getRandomString() {",
									"    return Math.random().toString(36).substring(2);",
									"}",
									"",
									"function getRandomNumber(max,min) {",
									"   return Math.floor(Math.random() *(max - min +1)) + min;",
									"}",
									"",
									"",
									"var firstname = getRandomString(); ",
									"var lastname  = getRandomString();",
									"console.log(firstname ,lastname)",
									"",
									"var email     = getRandomNumber(0,1000)",
									"console.log(email)",
									"email = 'zdsha.va.ll.i'+'+'+email+'@gmail.com'",
									"pm.environment.set(\"lojackadminuser\", email);",
									"",
									"var role = \"LotSmart Admin User\";",
									"var accountId = pm.globals.get(\"accountId\");",
									"console.log(accountId)",
									"",
									"",
									"",
									"const useradmin = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,",
									"\"phoneNumbers\":[{\"phoneNumber\":\"8309458309\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2840\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"const useradmin1 = {\"user\":{\"firstName\":\"usew1\",\"lastName\":\"mnuser1\",\"email\":\"zdsha.va.ll.i+323432@gmail.com\",\"phoneNumbers\":[{\"phoneNumber\":\"8309458309\",\"phoneType\":\"WORK\"}],\"username\":\"zdsha.va.ll.i+323432@gmail.com\",\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2840\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":\"LotSmart Admin User\"}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/5407\",\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"pm.globals.set('useradmin',JSON.stringify(useradmin));",
									"",
									"console.log(useradmin,useradmin1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{useradmin}}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserwithadminassistant_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202])",
									"    || pm.response.to.have.status(200);",
									"});",
									"",
									"//pm.test(\"Status code is 200\", function () {",
									"//    pm.response.to.have.status(200);",
									"//});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"",
									"// Retrive data validation",
									"const jsondata= pm.response.json();",
									"\t\t\t\t\t",
									"pm.test(\"username and role support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('username') ",
									"    &&  pm.expect(jsondata.response.results[0].user.username).to.eql(pm.environment.get(\"lojackadminassistuser\"))",
									"    &&  pm.expect(jsondata.response.results[0].user.roles[1].title).to.eql('LotSmart Admin Assistant');",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),",
									"\tpm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"if (jsondata.response.hasOwnProperty('searchableProperties')){",
									"pm.environment.set(\"lojackadminassistuserId\",jsondata.response.results[0].user.id);",
									"}",
									"// Full authentication fail",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									"",
									"function getRandomString() {",
									"    return Math.random().toString(36).substring(2);",
									"}",
									"",
									"function getRandomNumber(max,min) {",
									"   return Math.floor(Math.random() *(max - min +1)) + min;",
									"}",
									"",
									"",
									"var firstname = getRandomString(); ",
									"var lastname  = getRandomString();",
									"console.log(firstname ,lastname)",
									"",
									"var email     = getRandomNumber(0,1000)",
									"console.log(email)",
									"email = 'zdsha.va.ll.i'+'+'+email+'@gmail.com'",
									"pm.environment.set(\"lojackadminassistuser\", email);",
									"",
									"var role = \"LotSmart Admin Assistant\";",
									"var accountId = pm.globals.get(\"accountId\");",
									"console.log(accountId)",
									"",
									"",
									"",
									"const useradminassist1 = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,",
									"\"phoneNumbers\":[{\"phoneNumber\":\"8309458309\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2840\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"const useradminassist = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,\"phoneNumbers\":[{\"phoneNumber\":\"0328409384\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2841\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"pm.globals.set('useradminassist',JSON.stringify(useradminassist));",
									"",
									"console.log(useradminassist,useradminassist1)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{useradminassist}}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserwithSales_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202])",
									"    || pm.response.to.have.status(200);",
									"});",
									"",
									"//pm.test(\"Status code is 200\", function () {",
									"//    pm.response.to.have.status(200);",
									"//});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"",
									"// Retrive data validation",
									"const jsondata= pm.response.json();",
									"\t\t\t\t\t",
									"pm.test(\"username and role support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('username') ",
									"    &&  pm.expect(jsondata.response.results[0].user.username).to.eql(pm.environment.get(\"lojacksalesuser\"))",
									"    &&  pm.expect(jsondata.response.results[0].user.roles[0].title).to.eql('LotSmart Sales');",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),",
									"\tpm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"if (jsondata.response.hasOwnProperty('searchableProperties')){",
									"    pm.environment.set(\"lojacksalesuserId\",jsondata.response.results[0].user.id);",
									"}",
									"",
									"// Full authentication fail",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									"",
									"function getRandomString() {",
									"    return Math.random().toString(36).substring(2);",
									"}",
									"",
									"function getRandomNumber(max,min) {",
									"   return Math.floor(Math.random() *(max - min +1)) + min;",
									"}",
									"",
									"",
									"var firstname = getRandomString(); ",
									"var lastname  = getRandomString();",
									"console.log(firstname ,lastname)",
									"",
									"var email     = getRandomNumber(0,1000)",
									"console.log(email)",
									"email = 'zdsha.va.ll.i'+'+'+email+'@gmail.com'",
									"pm.environment.set(\"lojacksalesuser\", email);",
									"",
									"var role = \"LotSmart Sales\";",
									"var accountId = pm.globals.get(\"accountId\");",
									"console.log(accountId)",
									"",
									"",
									"",
									"const usersales1 = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,",
									"\"phoneNumbers\":[{\"phoneNumber\":\"8309458309\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2840\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"const usersales = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,\"phoneNumbers\":[{\"phoneNumber\":\"4532453454\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2842\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"",
									"pm.globals.set('usersales',JSON.stringify(usersales));",
									"",
									"console.log(usersales,usersales1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{usersales}}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserwithmanagerroles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202])",
									"    });",
									"",
									"//pm.test(\"Status code is 200\", function () {",
									"//    pm.response.to.have.status(200);",
									"//});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"",
									"// Retrive data validation",
									"const jsondata= pm.response.json();",
									"\t\t\t\t\t",
									"pm.test(\"username and role support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('username') ",
									"    &&  pm.expect(jsondata.response.results[0].user.username).to.eql(pm.environment.get(\"lojackmanageruser\"))",
									"    &&  pm.expect(jsondata.response.results[0].user.roles[0].title).to.eql('LotSmart Manager');",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),pm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"if (jsondata.response.hasOwnProperty('searchableProperties')){",
									"pm.environment.set(\"lojackmanageruserId\",jsondata.response.results[0].user.id);",
									"}",
									"// Full authentication fail",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									"",
									"//pm.environment.set(\"lojackmanageruserId\",jsondata.response.results[0].user.id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									"",
									"function getRandomString() {",
									"    return Math.random().toString(36).substring(2);",
									"}",
									"",
									"function getRandomNumber(max,min) {",
									"   return Math.floor(Math.random() *(max - min +1)) + min;",
									"}",
									"",
									"",
									"var firstname = getRandomString(); ",
									"var lastname  = getRandomString();",
									"console.log(firstname ,lastname)",
									"",
									"var email     = getRandomNumber(200,10000)",
									"console.log(email)",
									"email = 'zdsha.va.ll.i'+'+'+email+'@gmail.com'",
									"pm.environment.set(\"lojackmanageruser\", email);",
									"",
									"var role = \"LotSmart Manager\";",
									"var accountId = pm.globals.get(\"accountId\");",
									"console.log(accountId)",
									"",
									"",
									"",
									"const usermanager1 = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,",
									"\"phoneNumbers\":[{\"phoneNumber\":\"8309458309\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2840\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"const usermanager = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,\"phoneNumbers\":[{\"phoneNumber\":\"4564564645\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/5517\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"pm.globals.set('usermanager',JSON.stringify(usermanager));",
									"",
									"console.log(usermanager,usermanager1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{usermanager}}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserwithmanagerassistroles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202])",
									"    });",
									"",
									"//pm.test(\"Status code is 200\", function () {",
									"//    pm.response.to.have.status(200);",
									"//});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    }); ",
									"",
									"// Retrive data validation",
									"const jsondata= pm.response.json();",
									"\t\t\t\t\t",
									"pm.test(\"username and role support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('username') ",
									"    &&  pm.expect(jsondata.response.results[0].user.username).to.eql(pm.environment.get(\"lojackmanagerassistuser\"))",
									"    &&  pm.expect(jsondata.response.results[0].user.roles[0].title).to.eql('LotSmart Manager Assistant');",
									"});",
									"",
									"pm.test(\"user applicaion support\", function() {",
									"    pm.expect(jsondata.response.results[0].user).to.have.property('applications') ",
									"    &&  pm.expect(jsondata.response.results[0].user.applications[0].title).to.be.oneOf([pm.globals.get(\"applications1\"),",
									"\tpm.globals.get(\"applications2\")])",
									"    && pm.expect(jsondata.response.results[0].user.applications[1].title).to.eql(pm.globals.get(\"applications2\"));    ",
									"});",
									"",
									"if (jsondata.response.hasOwnProperty('searchableProperties')){",
									"pm.environment.set(\"lojackmanagerassistuserId\",jsondata.response.results[0].user.id);",
									"}",
									"",
									"// Full authentication fail",
									"",
									"// Performance validation",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"))",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									"",
									"function getRandomString() {",
									"    return Math.random().toString(36).substring(2);",
									"}",
									"",
									"function getRandomNumber(max,min) {",
									"   return Math.floor(Math.random() *(max - min +1)) + min;",
									"}",
									"",
									"",
									"var firstname = getRandomString(); ",
									"var lastname  = getRandomString();",
									"console.log(firstname ,lastname)",
									"",
									"var email     = getRandomNumber(0,1000)",
									"console.log(email)",
									"email = 'zdsha.va.ll.i'+'+'+email+'@gmail.com'",
									"pm.environment.set(\"lojackmanagerassistuser\", email);",
									"",
									"var role = \"LotSmart Manager Assistant\";",
									"var accountId = pm.globals.get(\"accountId\");",
									"console.log(accountId)",
									"",
									"",
									"",
									"const usermanagerassist1 = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,",
									"\"phoneNumbers\":[{\"phoneNumber\":\"8309458309\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2840\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"const usermanagerassist = {\"user\":{\"firstName\":firstname,\"lastName\":lastname,\"email\":email,\"phoneNumbers\":[{\"phoneNumber\":\"3095803948\",\"phoneType\":\"WORK\"}],\"username\":email,\"roles\":[{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/2563\",\"rel\":\"role\",\"title\":\"SureDrive Admin User\",\"status\":\"Enabled\"},{\"href\":\"https://qa.connect.calamp.com:443/connect/services/roles/5518\",\"rel\":\"role\",\"status\":\"Enabled\",\"title\":role}],\"applications\":[{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/ab4b4d99-93d4-4239-af59-96587839991c\"},{\"rel\":\"applications\",\"href\":\"https://qa.connect.calamp.com/connect/services/applications/d1bddf4e-efe3-494e-996c-72813d5d969e\"}],\"account\":{\"href\":\"https://qa.connect.calamp.com:443/connect/services/accounts/\"+accountId,\"rel\":\"account\",\"title\":\"LoJack CTC\",\"status\":\"Enabled\"}}}",
									"",
									"pm.globals.set('usermanagerassist',JSON.stringify(usermanagerassist));",
									"",
									"console.log(usermanagerassist,usermanagerassist1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{usermanagerassist}}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithadminroleO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackadminuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackadminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithadminrole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Deleted user-id  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.id).to.eql(pm.environment.get(\"lojackadminuserId\"));",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.status).to.eql(\"Deleted\")",
									"    && pm.expect(jsondata.response.results[0].user).to.have.property('deletionDate') ",
									"    });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackadminuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackadminuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithadminassistroleO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackadminassistuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackadminassistuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithadminassistrole Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Deleted user-id  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.id).to.eql(pm.environment.get(\"lojackadminassistuserId\"));",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.status).to.eql(\"Deleted\")",
									"    && pm.expect(jsondata.response.results[0].user).to.have.property('deletionDate') ",
									"    });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackadminassistuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackadminassistuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithsalesroleO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojacksalesuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojacksalesuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithsalesrole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Deleted user-id  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.id).to.eql(pm.environment.get(\"lojacksalesuserId\"));",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.status).to.eql(\"Deleted\")",
									"    && pm.expect(jsondata.response.results[0].user).to.have.property('deletionDate') ",
									"    });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojacksalesuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojacksalesuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithManagerO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackmanageruserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackmanageruserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithManager",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Deleted user-id  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.id).to.eql(pm.environment.get(\"lojackmanageruserId\"));",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.status).to.eql(\"Deleted\")",
									"    && pm.expect(jsondata.response.results[0].user).to.have.property('deletionDate') ",
									"    });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackmanageruserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackmanageruserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithManagerassistroleO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackmanagerassistuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackmanagerassistuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserwithManagerassistroleO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c1ad24-85ec-461b-a2c5-5f807bf5322c",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Deleted user-id  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.id).to.eql(pm.environment.get(\"lojackmanagerassistuserId\"));",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].user.status).to.eql(\"Deleted\")",
									"    && pm.expect(jsondata.response.results[0].user).to.have.property('deletionDate') ",
									"    });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3b068d5-47d2-4464-8a53-fc6dab2d826e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/users/{{lojackmanagerassistuserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"users",
								"{{lojackmanagerassistuserId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This module covers add, edit deleting of users along with search user functinality\t\t",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8a38ade4-34b9-418b-b7fa-4f2a19e8bef0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "79ae3b6d-a350-448c-8777-fa4715db6793",
						"type": "text/javascript",
						"exec": [
							"//",
							"//pm.test(\"Response time is less than 200ms\", function () {",
							"//    pm.expect(pm.response.responseTime).to.be.below(9000);",
							"//});",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SD Queue",
			"item": [
				{
					"name": "suredrivetaskstatusofacc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5028c36-eb25-466d-8251-62568fc202b7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\")",
									"    && pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    }); ",
									"",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12000);",
									"}); ",
									"",
									"// Retrive response and perform validations",
									"jsondata = pm.response.json()",
									"",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty;",
									"    }); ",
									"    ",
									"    totalsd = jsondata.response.results.length;",
									"    ",
									"    pm.environment.set(\"sdcomptaskid\", jsondata.response.results[totalsd-2].task.id);",
									"    pm.environment.set(\"sdfailtaskid\", jsondata.response.results[totalsd-5].task.id);",
									"    ",
									"    pm.test(\"sd task status: \", function() {",
									"    pm.expect(jsondata.response.results[0]).to.have.property(\"task\")",
									"    && pm.expect(jsondata.response.results[totalsd-2].task.status).to.eql(\"COMPLETED\") ",
									"        });",
									"    pm.test(\"sd task status: \", function() {",
									"    pm.expect(jsondata.response.results[totalsd-5]).to.have.property(\"task\")",
									"    && pm.expect(jsondata.response.results[totalsd-5].task.status).to.eql(\"FAILED\") ",
									"        })",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": " {{authtoken_key}}",
								"type": "text"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": " https://qainventory.lojack.com/",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/accounts/{{accountId1}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId1}}",
								"tasks"
							]
						},
						"description": "\t"
					},
					"response": []
				},
				{
					"name": "suredrive_TaskcompletedStatusfrom_queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5028c36-eb25-466d-8251-62568fc202b7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\")",
									"    && pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    }); ",
									"",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12000);",
									"}); ",
									"",
									"// Retrive response and perform validations",
									"jsondata = pm.response.json()",
									"",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty;",
									"    }); ",
									"    ",
									"    totalsd = jsondata.response.results.length;",
									"    ",
									"    pm.test(\"sd task status: \", function() {",
									"    pm.expect(jsondata.response.results[0]).to.have.property(\"task\")",
									"    && pm.expect(jsondata.response.results[0].task.status).to.eql(\"COMPLETED\") ",
									"        });",
									"   // pm.test(\"sd task status:fail \", function() {",
									"  //    pm.expect(jsondata.response.results[totalsd-5]).to.have.property(\"task\")",
									"  //  && pm.expect(jsondata.response.results[totalsd-5].task.status).to.eql(\"FAILED\") ",
									"  //    })",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/tasks/{{sdcomptaskid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"tasks",
								"{{sdcomptaskid}}"
							]
						},
						"description": "\t"
					},
					"response": []
				},
				{
					"name": "suredrive_TaskfailedStatusfrom_queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5028c36-eb25-466d-8251-62568fc202b7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\")",
									"    && pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    }); ",
									"",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12000);",
									"}); ",
									"",
									"// Retrive response and perform validations",
									"jsondata = pm.response.json()",
									"",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty;",
									"    }); ",
									"    ",
									"    totalsd = jsondata.response.results.length;",
									"  ",
									"    pm.test(\"sd task status:fail \", function() {",
									"    pm.expect(jsondata.response.results[0]).to.have.property(\"task\")",
									"    && pm.expect(jsondata.response.results[0].task.status).to.eql(\"FAILED\") ",
									"        })",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/tasks/{{sdfailtaskid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"tasks",
								"{{sdfailtaskid}}"
							]
						},
						"description": "\t"
					},
					"response": []
				},
				{
					"name": "suredrive_TaskSStatusfrom_queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "441cc420-4d03-46c3-97c0-8551d21de6f4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\")",
									"    && pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    }); ",
									"",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12000);",
									"}); ",
									"",
									"// Retrive response and perform validations",
									"jsondata = pm.response.json()",
									"",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty;",
									"    }); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": " {{authtoken_key}}",
								"type": "text"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": " https://qainventory.lojack.com/",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tasks\":[\"dfdc6414-d9ce-41a0-89f6-0938d37e5257\",\"{{sdcomptaskid}}\",\"{{sdfailtaskid}}\"]\n\t\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"tasks"
							]
						},
						"description": "\t"
					},
					"response": []
				},
				{
					"name": "suredrive_TasksStatusfrom_queueInvalidtaskIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "441cc420-4d03-46c3-97c0-8551d21de6f4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\")",
									"    && pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    }); ",
									"",
									"pm.test(\"Response time is less than 1200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12000);",
									"}); ",
									"",
									"// Retrive response and perform validations",
									"jsondata = pm.response.json()",
									"",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty;",
									"    }); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": " {{authtoken_key}}",
								"type": "text"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": " https://qainventory.lojack.com/",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tasks\":[\"dfdc6414-d9ce-4090-89f6-0938d37e5257\",\"fd36f0a8-7994-46b0-ac29-0b3e834b25d0\",\"dfdc6414-d9ce-41a0-89f6-0938d37e5257\",\"{{sdcomptaskid}}\",\"{{sdfailtaskid}}\"]\n\t\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"tasks"
							]
						},
						"description": "\t"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ManageVehicles",
			"item": [
				{
					"name": "search asset in dealer account_O",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88094fbe-13be-4525-a535-54fc4c5892e6",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 94000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(94000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "origin",
								"value": "https://qainventory.lojack.com",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=25",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "25"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer account_25",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8c4aab1-3c00-4a11-8619-4e6ecc214c8b",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"jsondata = pm.response.json()",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"pm.test(\"Number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(25);",
									"})",
									"",
									"",
									"",
									"",
									"// Fetch asset and device Ids",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(25);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=25 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "25 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_25",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search device in dealer account_O",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e60b8108-57ff-40fe-80bb-4af9ebaa4ab2",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"//var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "origin",
								"type": "text",
								"value": "https://qainventory.lojack.com"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_25",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(25);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":25,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer account by enabling subacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8c4aab1-3c00-4a11-8619-4e6ecc214c8b",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(10);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":10,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search device in dealer account_O",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e60b8108-57ff-40fe-80bb-4af9ebaa4ab2",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"//var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "origin",
								"value": "https://qainventory.lojack.com",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_10",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(10);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":10,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_10options",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoVG9rZW4iOiJjWFpXTTNsaGFFWldkSGhRZDJkdVlqVkVVV3A0UVNVelJDVXpSRHB1UzBwTFZYRkNVa1pSWm5aRlNHaFllSEI2YTNOUkpUTkVKVE5FIiwidXNlcklkIjoyMjUzMiwiYWNjb3VudElkIjo1NDA3LCJwYXJlbnRBY2NvdW50SWQiOjUzMjQsImZpcnN0TmFtZSI6ImZpcm5hIiwibGFzdE5hbWUiOiJzZWNvZG4iLCJ1c2VybmFtZSI6InpkLnNoYS52YS5sbGkrMjAxOUBnbWFpbC5jb20iLCJlbWFpbCI6InpkLnNoYS52YS5sbGkrMjAxOUBnbWFpbC5jb20iLCJyb2xlcyI6Ilt7XCJocmVmXCI6XCJodHRwczovL3FhLmNvbm5lY3QuY2FsYW1wLmNvbTo0NDMvY29ubmVjdC9zZXJ2aWNlcy9yb2xlcy8yNTYzXCIsXCJyZWxcIjpcInJvbGVcIixcInRpdGxlXCI6XCJTdXJlRHJpdmUgQWRtaW4gVXNlclwiLFwic3RhdHVzXCI6XCJFbmFibGVkXCJ9LHtcImhyZWZcIjpcImh0dHBzOi8vcWEuY29ubmVjdC5jYWxhbXAuY29tOjQ0My9jb25uZWN0L3NlcnZpY2VzL3JvbGVzLzI4NDBcIixcInJlbFwiOlwicm9sZVwiLFwidGl0bGVcIjpcIkxvdFNtYXJ0IEFkbWluIFVzZXJcIixcInN0YXR1c1wiOlwiRW5hYmxlZFwifV0iLCJ4QXBwS2V5IjoiYWI0YjRkOTktOTNkNC00MjM5LWFmNTktOTY1ODc4Mzk5OTFjIiwiaWF0IjoxNTc4MTI2ODkwfQ._M3CkCMCja4zdtw-IAoLcGJUmJVbapATtjCX9Qm1_ug",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_25wsubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer wosubacc account rpp10",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8c4aab1-3c00-4a11-8619-4e6ecc214c8b",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"jsondata = pm.response.json()",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(10);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":10,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"accountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=10 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_10wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/plain"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_10wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(10);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":10,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealerwosubaccount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8c4aab1-3c00-4a11-8619-4e6ecc214c8b",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"jsondata = pm.response.json()",
									"",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(25);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"accountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=25 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "25 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_25wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/plain"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_25wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(25);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":25,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer account_50",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"jsondata = pm.response.json()",
									"",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(50);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":50,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=50 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "50 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer wo account_50",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"jsondata = pm.response.json()",
									"console.log(jsondata)",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(50);",
									"});",
									"",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(50);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									"//let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									"",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":50,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"accountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=50 ",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "50 "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_50wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									" pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/plain"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_50wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(50);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":50,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer account_100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55a294ce-7c20-4451-b6af-34970a0a0462",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"var jsondata = pm.response.json()",
									"//var body = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"/*pm.test(\"Total number of vehicles vaidation\", function () {",
									"    jsondata = pm.response.json()",
									"    pm.expect(Object.keys(jsondata.results.length)).to.eql(100);",
									"}) */",
									"",
									"jsondata = pm.response.json()",
									"",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(100);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":100,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 12500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(100);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":100,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer wo subaccount_100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55a294ce-7c20-4451-b6af-34970a0a0462",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"var jsondata = pm.response.json()",
									"//var body = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"// Fetch asset and device Ids",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(100);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":100,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"accountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 12500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(100);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":100,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer account_500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29104b6c-dc9e-41b9-b707-01e423e67eb1",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"var jsondata = pm.response.json()",
									"//var body = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 14000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"// Fetch asset and device Ids",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(500);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"search\":{\"maxResults\":500,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=500",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 12500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_500wsubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present in account\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(500);",
									"  ",
									"   })",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":500,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search asset in dealer account_500 wosubacc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "280e6b6d-9908-4940-b4eb-cc32205dbb4b",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"var jsondata = pm.response.json()",
									"//var body = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 14000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"// Fetch asset and device Ids",
									"jsondata = pm.response.json()",
									"var jsonData = JSON.parse(responseBody)",
									"console.log(jsonData)",
									"console.log(jsonData.response.results.length)",
									"",
									"pm.test(\"Total number of vehicles\", function () {",
									"    pm.expect(jsondata.response.results.length).to.eql(500);",
									"})",
									"",
									"pm.environment.set(\"numberofvehicles\", Number(jsonData.response.results.length));",
									"Nofvehicles = pm.environment.get(\"numberofvehicles\"); ",
									"//pm.globals.set(\"length\",jsondata.results.length)",
									"",
									"if (Nofvehicles >= 1)",
									"{",
									"",
									" var lsdeviceids;",
									" var lsassetids;",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    let lsdeviceid = jsonData.response.results[i].asset.devices[0].href",
									"    lsdeviceid = lsdeviceid.split('/');",
									"    console.log(lsdeviceid)",
									"    let lsdeviceid1 = lsdeviceid[lsdeviceid.length-1]",
									"    let lsassetid1 = jsonData.response.results[i].asset.id",
									"    console.log(lsassetid1)",
									"    console.log(lsdeviceid1)",
									"    if (i === 0)",
									"    {",
									"        lsdeviceids = lsdeviceid1 +',';",
									"        lsassetids  = lsassetid1 +',';",
									"    }",
									"    else if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1;",
									"        lsassetids  = lsassetids + lsassetid1 ;",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids + lsdeviceid1 + ',';",
									"        lsassetids  = lsassetids + lsassetid1 + ',';",
									"    } ",
									"}",
									"}",
									"console.log(lsdeviceids);",
									"",
									"pm.environment.set(\"devicelist\",JSON.stringify(lsdeviceids));",
									"pm.environment.set(\"assetlist\",lsassetids);",
									"",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":500,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"accountId\\\": [{{accID}}] }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/assets/search?pg=1&pgsize=500",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"assets",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices in dealer account_500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									"",
									"var accid = pm.globals.get(\"accID\");",
									"accid = '[' + accid +']';",
									"pm.environment.set(\"ACCID\", accid);",
									"/*",
									"console.log(accid);",
									"const assetpayload = {\"search\":{\"maxResults\":25,\"searchTerms\":{\"extensions.query\":\"{ \\\"query\\\": { \\\"bool\\\": {\\\"filter\\\":{\\\"terms\\\": {\\\"parentAccountId\\\": accidd }},\\\"must\\\":[{\\\"nested\\\": {\\\"path\\\": \\\"devices\\\",\\\"query\\\":{\\\"exists\\\": {\\\"field\\\": \\\"devices\\\"}}}}],\\\"must_not\\\":{\\\"term\\\": {\\\"extensions.deviceStatus.status\\\":\\\"DISCONNECTED\\\"}} } }, \\\"sort\\\": {\\\"extensions.stockNumber.keyword\\\" : {\\\"order\\\": \\\"asc\\\"}}, \\\"aggs\\\":{\\\"years\\\":{\\\"terms\\\":{\\\"field\\\":\\\"year\\\"}},\\\"makes\\\":{\\\"terms\\\":{\\\"field\\\":\\\"make.keyword\\\"}},\\\"models\\\":{\\\"terms\\\":{\\\"field\\\":\\\"model.keyword\\\"}},\\\"colors\\\":{\\\"terms\\\":{\\\"field\\\":\\\"extensions.exteriorColor.keyword\\\"}}}}}\"}}}",
									"",
									"pm.environment.set(\"assetdetails\", JSON.stringify(assetpayload));",
									"",
									"//JSON.stringify(useradminassist));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody)",
									"pm.test(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(500);",
									"  ",
									"   })",
									"pm.test.skip(\"Total number of devices present\", function () {",
									"    pm.expect(jsonData.response.results.length).to.eql(500);",
									"  ",
									"   })",
									"   ",
									" /*",
									" const isLocal = pm.environment.get('enviroment') === 'local'",
									" ",
									" (isLocal ? pm.test.skip : pm.test)(\"check IP\",function(){",
									"     const.respoonse =   = pm.response.json();",
									"     pm.expect(response.origin).to.eql('10.14.123.12,103.34.23.135')",
									" }",
									"   ",
									"   ",
									" //let lsdeviceids;    ",
									"// printMessage( season, jsondata.results.length)",
									"//var Nofvehicles = jsondata.results",
									"//Nofvehicles.length",
									"//console.log(Nofvehicles)",
									"/*",
									"let arry = accountId.split('/');",
									"console.log(arry)",
									"console.log('---')",
									"console.log(arry[2])",
									"console.log(arry[arry.length-1])",
									"pm.globals.set(\"accId\",arry[arry.length-1])",
									" ",
									" ",
									"for(var i=0; i<Nofvehicles; i++)",
									"{  ",
									"    var lsdeviceid = (jsondata.results[i].devices[0].href).split('/');",
									"    lsdeviceid = lsdeviceid[lsdeviceid-1]",
									"    if (i===(Nofvehicles-1))",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid",
									"    }",
									"    else",
									"    {",
									"        lsdeviceids = lsdeviceids+ lsdeviceid + ',';",
									"    } ",
									"}",
									"",
									"console.log(lsdeviceids);",
									"",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\"search\":{\"maxResults\":500,\"searchTerms\":{\"id\": {{devicelist}} }}}"
						},
						"url": {
							"raw": "{{base_url}}/v1/devices/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search cvs in dealer account_500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea6cf03-b64b-4d7f-8e8c-1150072f1068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36f56dbf-8951-4122-af1b-dd36121a5663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response time is less than 12500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(12500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/plain"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"where\":\"assetId IN ({{assetlist}})\",\"outFields\":\"*\",\"returnGeometry\":\"true\",\"returnTrueCurves\":\"false\",\"f\":\"pjson\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cvs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cvs"
							]
						}
					},
					"response": []
				}
			],
			"description": "API validation in otsmart managevehicles tab",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a86540f4-6283-4e28-8871-030c6fa18860",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0f225335-7c85-487c-9aad-2ec4c359118b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "search dealer deviceO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb545ca7-572b-4a6d-89cf-8028820a7400",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Check if target is undefined\", function () {",
									"     pm.expect(pm.response.rawBody).to.be.an('undefined');",
									"    });",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(9500);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "origin",
								"value": " https://qainventory.lojack.com",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/{{dealerdeviceId}}",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"{{dealerdeviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search dealer device",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(Number(pm.environment.get(\"dealerdeviceId\")))",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\",\"LMU3240\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": " {{authtoken_key}}",
								"type": "text"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": " https://qainventory.lojack.com/",
								"type": "text"
							},
							{
								"key": "x-app-key",
								"value": "{{x-app-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/{{dealerdeviceId}}",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"{{dealerdeviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search suredrive device",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(Number(pm.environment.get(\"sddeviceId\")))",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(true)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\",\"LMU3240\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"customer user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"customer user aritime plan validation\", function(){",
									"    pm.expect(jsondata.response.results[0].device.activeAirtimePlan.deviceAirtime.airtimePlan.status).to.eql(\"Enabled\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"activeAirtimePlan\");",
									"    });",
									"    ",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/{{sddeviceId}}",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"{{sddeviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search dealer devices in bulk_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(127470)",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(5)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "952eef41-ab86-4e2a-9f8e-de73db4beaf9",
								"exec": [
									"var devices = \"127470,127536,127543,127600,127607\"",
									"pm.globals.set(\"devices_5\",JSON.stringify(devices));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"search\":{\"maxResults\":5,\"searchTerms\":{\"id\":{{devices_5}}}}}"
						},
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/search",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search dealer devices in bulk_5 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(127470)",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(5)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "952eef41-ab86-4e2a-9f8e-de73db4beaf9",
								"exec": [
									"var devices = \"127470,127536,127543,127600,127607\"",
									"pm.globals.set(\"devices_5\",JSON.stringify(devices));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"search\":{\"maxResults\":5,\"searchTerms\":{\"id\":{{devices_5}}}}}"
						},
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/search",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices search by ESN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(127470)",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "952eef41-ab86-4e2a-9f8e-de73db4beaf9",
								"exec": [
									"var devices =\"127470,127536,127543,127600,127607,127610,127611,127612,127614,127615\"",
									"pm.globals.set(\"devices_10\",JSON.stringify(devices));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}",
								"disabled": true
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/search?pg=1&pgsize=10",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices search by ESN Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(127470)",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "952eef41-ab86-4e2a-9f8e-de73db4beaf9",
								"exec": [
									"var devices =\"127470,127536,127543,127600,127607,127610,127611,127612,127614,127615\"",
									"pm.globals.set(\"devices_10\",JSON.stringify(devices));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"search\":{\"maxResults\":25,\"searchTerms\":{\"account\":\"5585,12156\",\"esn\":\"*3346426863*\"}}}"
						},
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/search?pg=1&pgsize=10",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices search by ESN  search wo sub-acc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(127470)",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "952eef41-ab86-4e2a-9f8e-de73db4beaf9",
								"exec": [
									"var devices =\"127470,127536,127543,127600,127607,127610,127611,127612,127614,127615\"",
									"pm.globals.set(\"devices_10\",JSON.stringify(devices));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"search\":{\"maxResults\":25,\"searchTerms\":{\"account\":\"5585,\",\"esn\":\"*3346426863*\"}}}"
						},
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/search?pg=1&pgsize=10",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search devices search by ESN partial search wo sub-acc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"pm.test(\"Validation device-id properties\", function(){",
									"    pm.expect(jsondata.response.results[0].device.id).to.eql(127470)",
									"    && pm.expect(jsondata.response.results[0].device.icnEnabled).to.eql(false)",
									"    && pm.expect(jsondata.response.results[0].device.type.title).to.be.oneOf([\"lmu3030\",\"lmu3040\"])",
									"    && pm.expect(jsondata.response.results[0].device.pegBehavior.title).to.be.oneOf([\"SDCTC_1_2\",\"SDCTC_1_4\"]);",
									"    ",
									"    });",
									"",
									"pm.test(\"Deleted user  present in response body\", function(){",
									"    pm.expect(jsondata.response.results[0].device).to.have.property(\"deviceConfiguration\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property('asset')",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"esn\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"airId\")",
									"    && pm.expect(jsondata.response.results[0].device).to.have.property(\"carrierStatus\");",
									"    });",
									"",
									"pm.test(\"Response has JSON body with results\", function () {",
									"    pm.expect(jsondata.response.results).to.be.an('array').that.is.not.empty",
									"       });",
									"",
									"",
									"pm.test(\"Number of users\", function() {",
									"    pm.expect(jsondata.response).to.have.property('results') ",
									"    && pm.expect(jsondata.response.search.maxResults).to.eql(10)",
									"    && pm.expect(jsondata.response.results.length).to.not.equal(0)",
									"    && pm.expect(jsondata.response.totalCount).to.not.eql(0);    ",
									"});",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									"",
									"if (jsondata.response.hasOwnProperty('errors')){",
									"",
									"if(pm.expect(jsondata.response.errors).to.include(\"Full authentication is required to access this resource\")){ ",
									"\tpm.test(\"Response has JSON body\", function () {",
									"    pm.expect(jsondata.response.errors).to.be.an('array').that.is.not.empty",
									"    &&pm.expect(jsondata.response.results).to.be.an('array').that.is.empty;",
									"    }); ",
									"    var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									"    console.log(loginurl)",
									"    ",
									"    var xappkey = pm.environment.get(\"x-app-key\");",
									"    console.log(xappkey)",
									"\tconst postRequest = {",
									"        url: loginurl , method: 'POST',",
									"        header: {'Content-Type':'application/json',",
									"                'x-app-key':xappkey",
									"                },",
									"        body: { mode: 'raw',",
									"                raw: JSON.stringify({\"username\" : username,\"password\" : password})",
									"                }",
									"        };",
									"            ",
									"//    pm.sendRequest(echoPostRequest, function (err, res) {",
									"//\t  console.log(err ? err : res.json());",
									"//});",
									"    console.log(loginurl)",
									"    pm.test(\"LogIn to acquire auth or bearer token\",function (){",
									"        //pm.response.to.have.status(401)",
									"        pm.sendRequest(postRequest, function (err,res){",
									"                if (err) {",
									"                            console.log(err);",
									"                }",
									"                else {",
									"\t\t\t\t\t//\tpm.response.to.have.status(200);",
									"\t\t\t\t\t\tlet jsondatanew=res.json();",
									"                        let token = jsondatanew.response.authToken",
									"\t\t\t\t\t\ttoken = token.substring(7)",
									"\t\t\t\t\t\tconsole.log(token)",
									"\t\t\t\t\t\tpm.globals.set(\"bearer_token\",token);",
									"\t\t\t\t\t\tconsole.log(token.substring(5));",
									"",
									"\t\t\t\t\t\tpm.globals.set(\"authtoken_key\", jsondatanew.response.authToken);",
									"\t\t\t\t\t\tconsole.log(pm.globals.get(\"authtoken_key\"));",
									"                      }",
									"            });",
									"        ",
									"    });",
									"    postman.setNextRequest(pm.info.requestName);",
									"\t}",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "952eef41-ab86-4e2a-9f8e-de73db4beaf9",
								"exec": [
									"var devices =\"127470,127536,127543,127600,127607,127610,127611,127612,127614,127615\"",
									"pm.globals.set(\"devices_10\",JSON.stringify(devices));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"search\":{\"maxResults\":25,\"searchTerms\":{\"account\":\"5585,12156\",\"esn\":\"*3346426*\"}}}"
						},
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/search?pg=1&pgsize=10",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"search"
							],
							"query": [
								{
									"key": "pg",
									"value": "1"
								},
								{
									"key": "pgsize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search dealer deviceidinvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e024617-d6b0-4adc-9e05-a219f0a45da7",
								"exec": [
									"//pm.test(\"Successful POST request\", function () {",
									" //   pm.expect(pm.response.code).to.be.oneOf([201,202])",
									" //   });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.be.withBody && pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(14000);",
									"});",
									"",
									"",
									"pm.test(\"content type is present in response header\", function(){",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf([\"application/json\",\"application/json; charset=utf-8\"]);",
									"    });",
									"    ",
									"    ",
									"  // Retrive data validation",
									"const jsondata= pm.response.json();",
									"",
									"",
									"",
									"/// ",
									" var loginurl = pm.environment.get(\"base_url\") + \"/v1/login\";",
									" console.log(loginurl)    ",
									" ",
									" var xappkey = pm.environment.get(\"x-app-key\");",
									" console.log(xappkey)",
									" var username = pm.environment.get(\"lslojackusername\");",
									" var password = pm.environment.get(\"password\");",
									" console.log(username,password) ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "https://qaapi.lojack.com/v1/devices/44414",
							"protocol": "https",
							"host": [
								"qaapi",
								"lojack",
								"com"
							],
							"path": [
								"v1",
								"devices",
								"44414"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sub-acc LogInAcc Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f53ad461-c579-4e88-99b1-be45f80baa1b",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 8000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(18000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": " {{authtoken_key}}"
							},
							{
								"key": "Sec-Fetch-Mode",
								"type": "text",
								"value": "cors"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": " https://qainventory.lojack.com/"
							},
							{
								"key": "x-app-key",
								"type": "text",
								"value": "{{x-app-key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/v1/accounts/{{accountId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "LotSmart application devices validations ",
			"protocolProfileBehavior": {}
		},
		{
			"name": "reporting token search",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11c37db0-2f06-4950-be70-4b5b834250ee",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.be.withBody && pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Did return token\", function() {",
							"   pm.expect(jsonData.results.token.length === 128).to.be.true",
							"});",
							"",
							"pm.test(\"Returned no errors\", function() {",
							"    //var jsonData = pm.response.json();",
							"    pm.expect(jsonData.results.length).to.equal();",
							"});",
							"",
							"pm.test(\"Returned pp token\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('results') ",
							"    && pm.expect(jsonData.results.token.length).to.not.equal(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": " {{authtoken_key}}"
					},
					{
						"key": "Sec-Fetch-Mode",
						"type": "text",
						"value": "cors"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Referer",
						"type": "text",
						"value": " https://qainventory.lojack.com/"
					},
					{
						"key": "x-app-key",
						"type": "text",
						"value": "{{x-app-key}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/v1/reporting/token/{{accountId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"reporting",
						"token",
						"{{accountId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sub-accsearch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11c37db0-2f06-4950-be70-4b5b834250ee",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": " {{authtoken_key}}",
						"type": "text"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " https://qainventory.lojack.com/",
						"type": "text"
					},
					{
						"key": "x-app-key",
						"value": "{{x-app-key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/v1/accounts/5407/subaccounts?v=2.1&hierLevel=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"accounts",
						"5407",
						"subaccounts"
					],
					"query": [
						{
							"key": "v",
							"value": "2.1"
						},
						{
							"key": "hierLevel",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "sub_account req",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "270eded7-7cb4-44b9-a966-36de65c07b7b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "021eccf4-9831-472f-978d-6a984ebad4d9",
						"exec": [
							"accId = pm.globals.get(\"accountId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": " {{authtoken_key}}",
						"type": "text"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " https://qainventory.lojack.com/",
						"type": "text"
					},
					{
						"key": "x-app-key",
						"value": "{{x-app-key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"search\":{\"maxResults\":\"25\",\"searchTerms\":{\"parent\":\"{{accountId}}\"},\"sort\":[\"+name\"]}}"
				},
				"url": {
					"raw": "https://qaapi.lojack.com/v1/accounts/search?pg=1&pgsize=25",
					"protocol": "https",
					"host": [
						"qaapi",
						"lojack",
						"com"
					],
					"path": [
						"v1",
						"accounts",
						"search"
					],
					"query": [
						{
							"key": "pg",
							"value": "1"
						},
						{
							"key": "pgsize",
							"value": "25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sub-acc LogInAcc",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f53ad461-c579-4e88-99b1-be45f80baa1b",
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 8000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(18000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": " {{authtoken_key}}"
					},
					{
						"key": "Sec-Fetch-Mode",
						"type": "text",
						"value": "cors"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Referer",
						"type": "text",
						"value": " https://qainventory.lojack.com/"
					},
					{
						"key": "x-app-key",
						"type": "text",
						"value": "{{x-app-key}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/v1/accounts/{{accountId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"accounts",
						"{{accountId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "98911304-a206-43ef-9bcb-2563a44d1599",
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					"\tkey: 'Content-Type',",
					"\tvalue: 'application/json'",
					"\t});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "50043afd-c434-412b-a1d0-911aa8a97c52",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}